{"version":3,"file":"main.js","mappings":"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","sources":["webpack://flashcards/./apps/server/src/app/app.controller.ts","webpack://flashcards/./apps/server/src/app/app.module.ts","webpack://flashcards/./apps/server/src/app/app.service.ts","webpack://flashcards/./apps/server/src/database/database.module.ts","webpack://flashcards/./apps/server/src/database/prisma.service.ts","webpack://flashcards/external commonjs \"@nestjs/common\"","webpack://flashcards/external commonjs \"@nestjs/core\"","webpack://flashcards/external commonjs \"@prisma/client\"","webpack://flashcards/external commonjs \"tslib\"","webpack://flashcards/webpack/bootstrap","webpack://flashcards/./apps/server/src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\nimport { Card } from '@prisma/client';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData(): { message: string } {\n    return this.appService.getData();\n  }\n\n  @Get('cards')\n  getCards(): Promise<Card[]> {\n    return this.appService.getCards();\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { DatabaseModule } from '../database/database.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n","import { Injectable } from '@nestjs/common';\nimport { Card } from '@prisma/client';\n\nimport { PrismaService } from '../database/prisma.service';\n\n@Injectable()\nexport class AppService {\n  constructor(private prisma: PrismaService) {}\n\n  getData(): { message: string } {\n    return { message: 'Welcome to flashcards-server!' };\n  }\n\n  getCards(): Promise<Card[]> {\n    return this.prisma.card.findMany();\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class DatabaseModule {}\n","import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@prisma/client\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const globalPrefix = 'api';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3333;\n  await app.listen(port);\n  Logger.log(\n    `ðŸš€ Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}