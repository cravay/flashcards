{"version":3,"file":"main.js","mappings":"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","sources":["webpack://flashcards/./apps/server/src/app/app.controller.ts","webpack://flashcards/./apps/server/src/app/app.module.ts","webpack://flashcards/./apps/server/src/app/app.service.ts","webpack://flashcards/./apps/server/src/database/database.module.ts","webpack://flashcards/./apps/server/src/database/prisma.service.ts","webpack://flashcards/./apps/server/src/health/health.controller.ts","webpack://flashcards/./apps/server/src/health/health.module.ts","webpack://flashcards/./apps/server/src/health/prisma.health-indicator.ts","webpack://flashcards/external commonjs \"@nestjs/common\"","webpack://flashcards/external commonjs \"@nestjs/core\"","webpack://flashcards/external commonjs \"@nestjs/terminus\"","webpack://flashcards/external commonjs \"@prisma/client\"","webpack://flashcards/external commonjs \"tslib\"","webpack://flashcards/webpack/bootstrap","webpack://flashcards/./apps/server/src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\nimport { Card } from '@prisma/client';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData(): { message: string } {\n    return this.appService.getData();\n  }\n\n  @Get('cards')\n  getCards(): Promise<Card[]> {\n    return this.appService.getCards();\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { DatabaseModule } from '../database/database.module';\nimport { HealthModule } from '../health/health.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [DatabaseModule, HealthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n","import { Injectable } from '@nestjs/common';\nimport { Card } from '@prisma/client';\n\nimport { PrismaService } from '../database/prisma.service';\n\n@Injectable()\nexport class AppService {\n  constructor(private prisma: PrismaService) {}\n\n  getData(): { message: string } {\n    return { message: 'Welcome to flashcards-server!' };\n  }\n\n  getCards(): Promise<Card[]> {\n    return this.prisma.card.findMany();\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class DatabaseModule {}\n","import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n","import { Controller, Get } from '@nestjs/common';\nimport { HealthCheck, HealthCheckService } from '@nestjs/terminus';\n\nimport { PrismaHealthIndicator } from './prisma.health-indicator';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private prismaHealthIndicator: PrismaHealthIndicator\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.prismaHealthIndicator.isHealthy('database'),\n    ]);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\n\nimport { DatabaseModule } from '../database/database.module';\nimport { HealthController } from './health.controller';\nimport { PrismaHealthIndicator } from './prisma.health-indicator';\n\n@Module({\n  imports: [DatabaseModule, TerminusModule],\n  providers: [PrismaHealthIndicator],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n","import { Injectable } from '@nestjs/common';\nimport {\n  HealthCheckError,\n  HealthIndicator,\n  HealthIndicatorResult,\n} from '@nestjs/terminus';\n\nimport { PrismaService } from '../database/prisma.service';\n\n// From https://stackoverflow.com/a/71445270\n@Injectable()\nexport class PrismaHealthIndicator extends HealthIndicator {\n  constructor(private readonly prismaService: PrismaService) {\n    super();\n  }\n\n  async isHealthy(key: string): Promise<HealthIndicatorResult> {\n    try {\n      await this.prismaService.$queryRaw`SELECT 1`;\n      return this.getStatus(key, true);\n    } catch (e) {\n      throw new HealthCheckError('Prisma check failed', e);\n    }\n  }\n}\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/terminus\");","module.exports = require(\"@prisma/client\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const globalPrefix = 'api';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3333;\n  await app.listen(port);\n  Logger.log(\n    `ðŸš€ Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap().catch(Logger.error);\n"],"names":[],"sourceRoot":""}