{"version":3,"file":"main.js","mappings":"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","sources":["webpack://flashcards/./apps/server/src/app/app.controller.ts","webpack://flashcards/./apps/server/src/app/app.module.ts","webpack://flashcards/./apps/server/src/app/app.service.ts","webpack://flashcards/./apps/server/src/card/card.api-dto.ts","webpack://flashcards/./apps/server/src/card/card.controller.ts","webpack://flashcards/./apps/server/src/card/card.module.ts","webpack://flashcards/./apps/server/src/card/card.service.ts","webpack://flashcards/./apps/server/src/database/database.module.ts","webpack://flashcards/./apps/server/src/database/prisma.service.ts","webpack://flashcards/./apps/server/src/deck/deck.api-dto.ts","webpack://flashcards/./apps/server/src/deck/deck.controller.ts","webpack://flashcards/./apps/server/src/deck/deck.module.ts","webpack://flashcards/./apps/server/src/deck/deck.service.ts","webpack://flashcards/./apps/server/src/environments/environment.prod.ts","webpack://flashcards/./apps/server/src/health/health.controller.ts","webpack://flashcards/./apps/server/src/health/health.module.ts","webpack://flashcards/./apps/server/src/health/prisma.health-indicator.ts","webpack://flashcards/./apps/server/src/user/user.api-dto.ts","webpack://flashcards/./apps/server/src/user/user.controller.ts","webpack://flashcards/./apps/server/src/user/user.module.ts","webpack://flashcards/./apps/server/src/user/user.service.ts","webpack://flashcards/./libs/shared/src/index.ts","webpack://flashcards/./libs/shared/src/lib/dto/card.dto.ts","webpack://flashcards/./libs/shared/src/lib/dto/date.schema.ts","webpack://flashcards/./libs/shared/src/lib/dto/deck.dto.ts","webpack://flashcards/./libs/shared/src/lib/dto/index.ts","webpack://flashcards/./libs/shared/src/lib/dto/user.dto.ts","webpack://flashcards/external commonjs \"@anatine/zod-nestjs\"","webpack://flashcards/external commonjs \"@anatine/zod-openapi\"","webpack://flashcards/external commonjs \"@nestjs/common\"","webpack://flashcards/external commonjs \"@nestjs/core\"","webpack://flashcards/external commonjs \"@nestjs/swagger\"","webpack://flashcards/external commonjs \"@nestjs/terminus\"","webpack://flashcards/external commonjs \"@prisma/client\"","webpack://flashcards/external commonjs \"date-fns\"","webpack://flashcards/external commonjs \"nestjs-pino\"","webpack://flashcards/external commonjs \"tslib\"","webpack://flashcards/external commonjs \"zod\"","webpack://flashcards/webpack/bootstrap","webpack://flashcards/./apps/server/src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\nimport { ApiResponse } from '@nestjs/swagger';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  @ApiResponse({\n    schema: { type: 'object', properties: { message: { type: 'string' } } },\n  })\n  getData(): { message: string } {\n    return this.appService.getData();\n  }\n}\n","import { ZodValidationPipe } from '@anatine/zod-nestjs';\nimport { Module } from '@nestjs/common';\nimport { APP_PIPE } from '@nestjs/core';\nimport { LoggerModule } from 'nestjs-pino';\n\nimport { CardModule } from '../card/card.module';\nimport { DatabaseModule } from '../database/database.module';\nimport { DeckModule } from '../deck/deck.module';\nimport { HealthModule } from '../health/health.module';\nimport { UserModule } from '../user/user.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [\n    DatabaseModule,\n    HealthModule,\n    LoggerModule.forRoot(),\n    UserModule,\n    CardModule,\n    DeckModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService, { provide: APP_PIPE, useClass: ZodValidationPipe }],\n})\nexport class AppModule {}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return { message: 'Welcome to flashcards-server!' };\n  }\n}\n","import { createZodDto } from '@anatine/zod-nestjs';\nimport { extendApi } from '@anatine/zod-openapi';\nimport { cardSchema } from '@flashcards/shared';\n\nexport class CardApiDto extends createZodDto(extendApi(cardSchema)) {}\n","import { Controller, Get, Param, ParseIntPipe } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\nimport { CardApiDto } from './card.api-dto';\nimport { CardService } from './card.service';\n\n@ApiTags('cards')\n@Controller('cards')\nexport class CardController {\n  constructor(private cardService: CardService) {}\n\n  @Get()\n  findMany(): Promise<CardApiDto[]> {\n    return this.cardService.findMany();\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number): Promise<CardApiDto> {\n    return this.cardService.findOne(id);\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { DatabaseModule } from '../database/database.module';\nimport { CardController } from './card.controller';\nimport { CardService } from './card.service';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [CardController],\n  providers: [CardService],\n})\nexport class CardModule {}\n","import { CardDto } from '@flashcards/shared';\nimport { Injectable, NotFoundException } from '@nestjs/common';\n\nimport { PrismaService } from '../database/prisma.service';\n\n@Injectable()\nexport class CardService {\n  constructor(private prisma: PrismaService) {}\n\n  findMany(): Promise<CardDto[]> {\n    return this.prisma.card.findMany();\n  }\n\n  findOne(id: number): Promise<CardDto> {\n    return this.prisma.card.findUnique({\n      where: { id },\n      rejectOnNotFound: () => new NotFoundException(),\n    });\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class DatabaseModule {}\n","import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n","import { createZodDto } from '@anatine/zod-nestjs';\nimport { extendApi } from '@anatine/zod-openapi';\nimport {\n  createDeckSchema,\n  deckSchema,\n  deckWithAuthorSchema,\n  updateDeckSchema,\n} from '@flashcards/shared';\n\nexport class DeckApiDto extends createZodDto(extendApi(deckSchema)) {}\n\nexport class DeckWithAuthorApiDto extends createZodDto(\n  extendApi(deckWithAuthorSchema)\n) {}\n\nexport class CreateDeckApiDto extends createZodDto(\n  extendApi(createDeckSchema)\n) {}\n\nexport class UpdateDeckApiDto extends createZodDto(\n  extendApi(updateDeckSchema)\n) {}\n","import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\nimport {\n  CreateDeckApiDto,\n  DeckApiDto,\n  DeckWithAuthorApiDto,\n  UpdateDeckApiDto,\n} from './deck.api-dto';\nimport { DeckService } from './deck.service';\n\n@ApiTags('decks')\n@Controller('decks')\nexport class DeckController {\n  constructor(private deckService: DeckService) {}\n\n  @Post()\n  create(@Body() deck: CreateDeckApiDto): Promise<DeckApiDto> {\n    return this.deckService.create(deck);\n  }\n\n  @Get()\n  findMany(): Promise<DeckWithAuthorApiDto[]> {\n    return this.deckService.findMany();\n  }\n\n  @Get(':id')\n  findOne(\n    @Param('id', ParseIntPipe) id: number\n  ): Promise<DeckWithAuthorApiDto> {\n    return this.deckService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() deck: UpdateDeckApiDto\n  ): Promise<DeckApiDto> {\n    return this.deckService.update(id, deck);\n  }\n\n  @Delete(':id')\n  remove(@Param('id', ParseIntPipe) id: number): Promise<DeckApiDto> {\n    return this.deckService.remove(id);\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { DatabaseModule } from '../database/database.module';\nimport { DeckController } from './deck.controller';\nimport { DeckService } from './deck.service';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [DeckController],\n  providers: [DeckService],\n})\nexport class DeckModule {}\n","import {\n  CreateDeckDto,\n  DeckDto,\n  DeckWithAuthorDto,\n  UpdateDeckDto,\n} from '@flashcards/shared';\nimport { Injectable, NotFoundException } from '@nestjs/common';\n\nimport { PrismaService } from '../database/prisma.service';\n\n@Injectable()\nexport class DeckService {\n  constructor(private prisma: PrismaService) {}\n\n  create(deck: CreateDeckDto): Promise<DeckDto> {\n    return this.prisma.deck.create({ data: deck });\n  }\n\n  findMany(): Promise<DeckWithAuthorDto[]> {\n    return this.prisma.deck.findMany({\n      include: { author: true },\n      orderBy: { name: 'asc' },\n    });\n  }\n\n  findOne(id: number): Promise<DeckWithAuthorDto> {\n    return this.prisma.deck.findUnique({\n      where: { id },\n      include: { author: true },\n      rejectOnNotFound: () => new NotFoundException(),\n    });\n  }\n\n  update(id: number, deck: UpdateDeckDto): Promise<DeckDto> {\n    return this.prisma.deck.update({ where: { id }, data: deck });\n  }\n\n  remove(id: number): Promise<DeckDto> {\n    return this.prisma.deck.delete({ where: { id } });\n  }\n}\n","export const environment = {\n  production: true,\n  corsOrigin: 'https://flashcards-7vuj.onrender.com',\n};\n","import { Controller, Get } from '@nestjs/common';\nimport { HealthCheck, HealthCheckService } from '@nestjs/terminus';\n\nimport { PrismaHealthIndicator } from './prisma.health-indicator';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private prismaHealthIndicator: PrismaHealthIndicator\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.prismaHealthIndicator.isHealthy('database'),\n    ]);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\n\nimport { DatabaseModule } from '../database/database.module';\nimport { HealthController } from './health.controller';\nimport { PrismaHealthIndicator } from './prisma.health-indicator';\n\n@Module({\n  imports: [DatabaseModule, TerminusModule],\n  providers: [PrismaHealthIndicator],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n","import { Injectable } from '@nestjs/common';\nimport {\n  HealthCheckError,\n  HealthIndicator,\n  HealthIndicatorResult,\n} from '@nestjs/terminus';\n\nimport { PrismaService } from '../database/prisma.service';\n\n// From https://stackoverflow.com/a/71445270\n@Injectable()\nexport class PrismaHealthIndicator extends HealthIndicator {\n  constructor(private readonly prismaService: PrismaService) {\n    super();\n  }\n\n  async isHealthy(key: string): Promise<HealthIndicatorResult> {\n    try {\n      await this.prismaService.$queryRaw`SELECT 1`;\n      return this.getStatus(key, true);\n    } catch (e) {\n      throw new HealthCheckError('Prisma check failed', e);\n    }\n  }\n}\n","import { createZodDto } from '@anatine/zod-nestjs';\nimport { extendApi } from '@anatine/zod-openapi';\nimport { userSchema } from '@flashcards/shared';\n\nexport class UserApiDto extends createZodDto(extendApi(userSchema)) {}\n","import { Controller, Get, Param, ParseIntPipe } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\nimport { UserApiDto } from './user.api-dto';\nimport { UserService } from './user.service';\n\n@ApiTags('users')\n@Controller('users')\nexport class UserController {\n  constructor(private userService: UserService) {}\n\n  @Get()\n  findMany(): Promise<UserApiDto[]> {\n    return this.userService.findMany();\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number): Promise<UserApiDto> {\n    return this.userService.findOne(id);\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { DatabaseModule } from '../database/database.module';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n","import { UserDto } from '@flashcards/shared';\nimport { Injectable, NotFoundException } from '@nestjs/common';\n\nimport { PrismaService } from '../database/prisma.service';\n\n@Injectable()\nexport class UserService {\n  constructor(private prisma: PrismaService) {}\n\n  findMany(): Promise<UserDto[]> {\n    return this.prisma.user.findMany({ orderBy: { name: 'asc' } });\n  }\n\n  findOne(id: number): Promise<UserDto> {\n    return this.prisma.user.findUnique({\n      where: { id },\n      rejectOnNotFound: () => new NotFoundException(),\n    });\n  }\n}\n","export * from './lib/dto';\n","import { z } from 'zod';\n\nexport const cardSchema = z.object({\n  id: z.number().int(),\n  front: z.string(),\n  back: z.string(),\n});\n\nexport type CardDto = z.infer<typeof cardSchema>;\n","import { isValid, parseISO } from 'date-fns';\nimport { z } from 'zod';\n\n// In order to be able to share this schema between the frontend and the backend\n// it allows both date objects and ISO date strings. Prisma returns date objects,\n// but it's not allowed to store Date objects in the Redux store.\n// Also see https://github.com/colinhacks/zod#dates\nexport const dateSchema = z.preprocess((value) => {\n  if (typeof value === 'string') {\n    return isValid(parseISO(value)) ? value : undefined;\n  }\n\n  if (value instanceof Date) {\n    return value;\n  }\n\n  return undefined;\n}, z.union([z.date(), z.string()]));\n","import { z } from 'zod';\n\nimport { dateSchema } from './date.schema';\nimport { userSchema } from './user.dto';\n\nexport const deckSchema = z.object({\n  id: z.number().int(),\n  name: z.string().min(3),\n  description: z.preprocess(\n    (value) => value || null,\n    z.string().min(3).nullish()\n  ),\n  authorId: z.number().int(),\n  createdAt: dateSchema,\n  updatedAt: dateSchema,\n});\n\nexport const deckWithAuthorSchema = deckSchema.extend({\n  author: userSchema,\n});\n\nexport const createDeckSchema = deckSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateDeckSchema = createDeckSchema.partial();\n\nexport type DeckDto = z.infer<typeof deckSchema>;\nexport type DeckWithAuthorDto = z.infer<typeof deckWithAuthorSchema>;\nexport type CreateDeckDto = z.infer<typeof createDeckSchema>;\nexport type UpdateDeckDto = z.infer<typeof updateDeckSchema>;\n","export * from './card.dto';\nexport * from './deck.dto';\nexport * from './user.dto';\n","import { z } from 'zod';\n\nexport const userSchema = z.object({\n  id: z.number().int(),\n  name: z.string(),\n  avatar: z.string().url(),\n  eMail: z.string().email(),\n});\n\nexport type UserDto = z.infer<typeof userSchema>;\n","module.exports = require(\"@anatine/zod-nestjs\");","module.exports = require(\"@anatine/zod-openapi\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"@nestjs/terminus\");","module.exports = require(\"@prisma/client\");","module.exports = require(\"date-fns\");","module.exports = require(\"nestjs-pino\");","module.exports = require(\"tslib\");","module.exports = require(\"zod\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { patchNestjsSwagger } from '@anatine/zod-nestjs';\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, { bufferLogs: true });\n  const port = process.env.PORT || 3333;\n\n  app.enableCors({ origin: environment.corsOrigin });\n\n  const config = new DocumentBuilder()\n    .setTitle('Flashcard API')\n    .setDescription('REST Api to manage flashcard decks')\n    .setVersion('1.0')\n    .build();\n\n  patchNestjsSwagger(); // See https://github.com/anatine/zod-plugins/tree/main/libs/zod-nestjs\n  const document = SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('api', app, document);\n\n  await app.listen(port);\n\n  Logger.log(`🚀 Application is running on: http://localhost:${port}`);\n}\n\nbootstrap().catch(Logger.error);\n"],"names":["AppController","constructor","appService","getData","this","Get","ApiResponse","schema","type","properties","message","Controller","AppService","AppModule","Module","imports","DatabaseModule","HealthModule","LoggerModule","forRoot","UserModule","CardModule","DeckModule","controllers","providers","provide","APP_PIPE","useClass","ZodValidationPipe","Injectable","CardApiDto","createZodDto","extendApi","cardSchema","CardController","cardService","findMany","findOne","id","Param","ParseIntPipe","ApiTags","CardService","prisma","card","findUnique","where","rejectOnNotFound","NotFoundException","PrismaService","exports","PrismaClient","onModuleInit","$connect","enableShutdownHooks","app","$on","close","DeckApiDto","deckSchema","DeckWithAuthorApiDto","deckWithAuthorSchema","CreateDeckApiDto","createDeckSchema","UpdateDeckApiDto","updateDeckSchema","DeckController","deckService","create","deck","update","remove","Post","Body","Patch","Delete","DeckService","data","include","author","orderBy","name","delete","environment","production","corsOrigin","HealthController","health","prismaHealthIndicator","check","isHealthy","HealthCheck","HealthCheckService","PrismaHealthIndicator","TerminusModule","HealthIndicator","prismaService","super","key","$queryRaw","getStatus","e","HealthCheckError","UserApiDto","userSchema","UserController","userService","UserService","user","z","object","number","int","front","string","back","dateSchema","preprocess","value","isValid","parseISO","undefined","Date","union","date","min","description","nullish","authorId","createdAt","updatedAt","extend","omit","partial","avatar","url","eMail","email","module","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","NestFactory","bufferLogs","port","process","env","PORT","enableCors","origin","config","DocumentBuilder","setTitle","setDescription","setVersion","build","patchNestjsSwagger","document","SwaggerModule","createDocument","setup","listen","Logger","log","bootstrap","catch","error"],"sourceRoot":""}