{"version":3,"file":"main.js","mappings":"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","sources":["webpack://flashcards/./apps/server/src/app/app.controller.ts","webpack://flashcards/./apps/server/src/app/app.module.ts","webpack://flashcards/./apps/server/src/app/app.service.ts","webpack://flashcards/./apps/server/src/database/database.module.ts","webpack://flashcards/./apps/server/src/database/prisma.service.ts","webpack://flashcards/./apps/server/src/environments/environment.prod.ts","webpack://flashcards/./apps/server/src/health/health.controller.ts","webpack://flashcards/./apps/server/src/health/health.module.ts","webpack://flashcards/./apps/server/src/health/prisma.health-indicator.ts","webpack://flashcards/./apps/server/src/user/user.controller.ts","webpack://flashcards/./apps/server/src/user/user.module.ts","webpack://flashcards/./apps/server/src/user/user.service.ts","webpack://flashcards/external commonjs \"@nestjs/common\"","webpack://flashcards/external commonjs \"@nestjs/core\"","webpack://flashcards/external commonjs \"@nestjs/terminus\"","webpack://flashcards/external commonjs \"@prisma/client\"","webpack://flashcards/external commonjs \"nestjs-pino\"","webpack://flashcards/external commonjs \"tslib\"","webpack://flashcards/webpack/bootstrap","webpack://flashcards/./apps/server/src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\nimport { Card } from '@prisma/client';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData(): { message: string } {\n    return this.appService.getData();\n  }\n\n  @Get('cards')\n  getCards(): Promise<Card[]> {\n    return this.appService.getCards();\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { LoggerModule } from 'nestjs-pino';\n\nimport { DatabaseModule } from '../database/database.module';\nimport { HealthModule } from '../health/health.module';\nimport { UserModule } from '../user/user.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [DatabaseModule, HealthModule, LoggerModule.forRoot(), UserModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n","import { Injectable } from '@nestjs/common';\nimport { Card } from '@prisma/client';\n\nimport { PrismaService } from '../database/prisma.service';\n\n@Injectable()\nexport class AppService {\n  constructor(private prisma: PrismaService) {}\n\n  getData(): { message: string } {\n    return { message: 'Welcome to flashcards-server!' };\n  }\n\n  getCards(): Promise<Card[]> {\n    return this.prisma.card.findMany();\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class DatabaseModule {}\n","import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n","export const environment = {\n  production: true,\n  corsOrigin: 'https://flashcards-7vuj.onrender.com',\n};\n","import { Controller, Get } from '@nestjs/common';\nimport { HealthCheck, HealthCheckService } from '@nestjs/terminus';\n\nimport { PrismaHealthIndicator } from './prisma.health-indicator';\n\n@Controller('health')\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private prismaHealthIndicator: PrismaHealthIndicator\n  ) {}\n\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.prismaHealthIndicator.isHealthy('database'),\n    ]);\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\n\nimport { DatabaseModule } from '../database/database.module';\nimport { HealthController } from './health.controller';\nimport { PrismaHealthIndicator } from './prisma.health-indicator';\n\n@Module({\n  imports: [DatabaseModule, TerminusModule],\n  providers: [PrismaHealthIndicator],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n","import { Injectable } from '@nestjs/common';\nimport {\n  HealthCheckError,\n  HealthIndicator,\n  HealthIndicatorResult,\n} from '@nestjs/terminus';\n\nimport { PrismaService } from '../database/prisma.service';\n\n// From https://stackoverflow.com/a/71445270\n@Injectable()\nexport class PrismaHealthIndicator extends HealthIndicator {\n  constructor(private readonly prismaService: PrismaService) {\n    super();\n  }\n\n  async isHealthy(key: string): Promise<HealthIndicatorResult> {\n    try {\n      await this.prismaService.$queryRaw`SELECT 1`;\n      return this.getStatus(key, true);\n    } catch (e) {\n      throw new HealthCheckError('Prisma check failed', e);\n    }\n  }\n}\n","import { UserDto } from '@flashcards/shared';\nimport { Controller, Get, Param, ParseIntPipe } from '@nestjs/common';\n\nimport { UserService } from './user.service';\n\n@Controller('users')\nexport class UserController {\n  constructor(private userService: UserService) {}\n\n  @Get()\n  findMany(): Promise<UserDto[]> {\n    return this.userService.findMany();\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number): Promise<UserDto> {\n    return this.userService.findOne(id);\n  }\n}\n","import { Module } from '@nestjs/common';\n\nimport { DatabaseModule } from '../database/database.module';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { User } from '@prisma/client';\n\nimport { PrismaService } from '../database/prisma.service';\n\n@Injectable()\nexport class UserService {\n  constructor(private prisma: PrismaService) {}\n\n  findMany(): Promise<User[]> {\n    return this.prisma.user.findMany();\n  }\n\n  findOne(id: number): Promise<User> {\n    return this.prisma.user.findUnique({\n      where: { id },\n      rejectOnNotFound: () => new NotFoundException(),\n    });\n  }\n}\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/terminus\");","module.exports = require(\"@prisma/client\");","module.exports = require(\"nestjs-pino\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const port = process.env.PORT || 3333;\n  app.enableCors({ origin: environment.corsOrigin });\n  await app.listen(port);\n\n  Logger.log(`🚀 Application is running on: http://localhost:${port}`);\n}\n\nbootstrap().catch(Logger.error);\n"],"names":["AppController","constructor","appService","getData","this","getCards","Get","Promise","Controller","AppService","AppModule","Module","imports","DatabaseModule","HealthModule","LoggerModule","forRoot","UserModule","controllers","providers","prisma","message","card","findMany","Injectable","PrismaService","exports","PrismaClient","onModuleInit","$connect","enableShutdownHooks","app","$on","close","environment","production","corsOrigin","HealthController","health","prismaHealthIndicator","check","isHealthy","HealthCheck","HealthCheckService","PrismaHealthIndicator","TerminusModule","HealthIndicator","prismaService","super","key","$queryRaw","getStatus","e","HealthCheckError","UserController","userService","findOne","id","Param","ParseIntPipe","UserService","user","findUnique","where","rejectOnNotFound","NotFoundException","module","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","NestFactory","create","port","process","env","PORT","enableCors","origin","listen","Logger","log","bootstrap","catch","error"],"sourceRoot":""}